import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import logging
from database_simple import BoletinesDBSimple
from scraper_simple import ScraperSimple
from buscador_historico import BuscadorHistorico, format_email

def show_buscador_tab(selected_tab):
    st.header("üîç Buscador Hist√≥rico de Boletines")
    st.markdown("**Sistema de b√∫squeda hist√≥rica** - Busca municipios y menciones en datos almacenados")
    
    # Inicializar componentes
    @st.cache_resource
    def init_database():
        return BoletinesDBSimple("tabs/buscador/data/boletines.db")

    @st.cache_resource
    def init_scraper():
        return ScraperSimple("tabs/buscador/data/boletines.db")

    @st.cache_resource
    def init_buscador():
        return BuscadorHistorico("tabs/buscador/data/boletines.db")
    
    # La verificaci√≥n y carga autom√°tica se hace en app.py al inicio
    
    db = init_database()
    scraper = init_scraper()
    buscador = init_buscador()
    
    # Obtener estad√≠sticas
    stats = db.obtener_estadisticas()
    
    # Mostrar estad√≠sticas en el sidebar solo para esta pesta√±a
    if selected_tab == "üîç Buscador Hist√≥rico":
        with st.sidebar:
            st.divider()
            st.header("üìä Base de Datos Hist√≥rica")
            
            if stats and stats.get('total', 0) > 0:
                st.metric("üìÅ Total boletines HTML", stats.get('total', 0))
                
                if stats.get('por_fuente'):
                    st.subheader("Por fuente:")
                    for fuente, cantidad in stats['por_fuente'].items():
                        st.write(f"‚Ä¢ **{fuente}**: {cantidad} d√≠as")
                
                if stats.get('fecha_inicio') and stats.get('fecha_fin'):
                    fecha_inicio_display = str(stats['fecha_inicio'])
                    fecha_fin_display = str(stats['fecha_fin'])
                    st.write(f"üìÖ **Per√≠odo**: {fecha_inicio_display} ‚Üí {fecha_fin_display}")
            else:
                st.warning("‚ö†Ô∏è Base de datos vac√≠a")
            
            st.divider()
            
            # Bot√≥n para actualizar datos
            if st.button("üîÑ Actualizar Base de Datos"):
                with st.spinner("Descargando HTML hist√≥rico... (5-10 minutos)"):
                    try:
                        results = scraper.ejecutar_scraping_completo()
                        st.success(f"‚úÖ Proceso completado!")
                        st.json(results)
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error descargando: {e}")
                        logging.error(f"Error en scraping: {e}")
    
    # Interfaz principal
    if not stats or stats.get('total', 0) == 0:
        st.warning("‚ö†Ô∏è **Base de datos vac√≠a.** Usa el bot√≥n lateral para descargar los boletines hist√≥ricos primero.")
        st.stop()
    
    # Configuraci√≥n de b√∫squeda
    st.subheader("‚öôÔ∏è Configuraci√≥n de B√∫squeda")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**üèõÔ∏è Municipios**")
        municipios_text = st.text_area(
            "Lista de municipios (uno por l√≠nea):",
            value="Badajoz\nM√©rida\nC√°ceres",
            height=120,
            help="Introduce cada municipio en una l√≠nea separada"
        )
        municipios = [m.strip() for m in municipios_text.split('\n') if m.strip()]
        st.write(f"‚úÖ **{len(municipios)} municipios** configurados")
    
    with col2:
        st.write("**üîç Menciones M√∫ltiples**")
        menciones_text = st.text_area(
            "Lista de menciones m√∫ltiples (una por l√≠nea):",
            value="licitaci√≥n, obra p√∫blica\ncontrato, servicios\nurbanismo, licencia\nordenanza, tr√°fico\npresupuesto, municipal\nsubvenci√≥n, asociaci√≥n",
            height=120,
            help="Cada l√≠nea = una b√∫squeda. Separa palabras con comas para b√∫squeda AND (todas las palabras deben aparecer)"
        )
        menciones = [m.strip() for m in menciones_text.split('\n') if m.strip()]
        st.write(f"‚úÖ **{len(menciones)} menciones m√∫ltiples** configuradas")
        
        # Mostrar preview de las menciones
        with st.expander("üëÅÔ∏è Preview menciones m√∫ltiples"):
            for i, mencion in enumerate(menciones, 1):
                palabras = [p.strip() for p in mencion.split(',') if p.strip()]
                if len(palabras) > 1:
                    st.write(f"{i}. **B√∫squeda AND**: {' + '.join(palabras)}")
                else:
                    st.write(f"{i}. **B√∫squeda simple**: {palabras[0]}")
    
    # Configuraci√≥n adicional
    col3, col4 = st.columns(2)
    
    with col3:
        fuentes = st.multiselect(
            "üìã Fuentes a consultar:",
            options=["BOE", "DOE", "BOP"],
            default=["BOE", "DOE", "BOP"],
            help="Selecciona qu√© boletines consultar"
        )
    
    with col4:
        # Obtener rango disponible de la BD
        if stats.get('fecha_inicio') and stats.get('fecha_fin'):
            try:
                fecha_inicio_str = str(stats['fecha_inicio'])
                fecha_fin_str = str(stats['fecha_fin'])
                min_date = datetime.strptime(fecha_inicio_str, "%Y%m%d").date()
                max_date = datetime.strptime(fecha_fin_str, "%Y%m%d").date()
            except (ValueError, TypeError):
                # Si hay error parsing fechas, usar fechas por defecto
                max_date = datetime.now().date()
                min_date = max_date - timedelta(days=90)
        else:
            # BD vac√≠a - usar fechas por defecto
            max_date = datetime.now().date()
            min_date = max_date - timedelta(days=90)
            
            col4_1, col4_2 = st.columns(2)
            with col4_1:
                fecha_inicio = st.date_input(
                    "üìÖ Fecha inicio:",
                    value=max_date - timedelta(days=30),
                    min_value=min_date,
                    max_value=max_date
                )
            
            with col4_2:
                fecha_fin = st.date_input(
                    "üìÖ Fecha fin:",
                    value=max_date,
                    min_value=min_date,
                    max_value=max_date
                )
        else:
            st.error("No se puede determinar el rango de fechas disponible")
            st.stop()
    
    # Validaciones
    if fecha_inicio > fecha_fin:
        st.error("‚ùå La fecha de inicio debe ser anterior a la fecha de fin")
        st.stop()
    
    # Bot√≥n de b√∫squeda principal
    st.divider()
    
    if not municipios and not menciones:
        st.error("‚ö†Ô∏è **Configura al menos municipios o menciones** para realizar la b√∫squeda")
    elif not fuentes:
        st.error("‚ö†Ô∏è **Selecciona al menos una fuente** (BOE, DOE, BOP)")
    else:
        if st.button("üöÄ Ejecutar B√∫squeda Hist√≥rica", type="primary", use_container_width=True):
            with st.spinner("Ejecutando b√∫squeda hist√≥rica..."):
                try:
                    fecha_inicio_str = fecha_inicio.strftime("%Y%m%d")
                    fecha_fin_str = fecha_fin.strftime("%Y%m%d")
                    
                    results = buscador.buscar_municipio_y_menciones(
                        municipios=municipios,
                        menciones=menciones,
                        fuentes=fuentes,
                        fecha_inicio=fecha_inicio_str,
                        fecha_fin=fecha_fin_str
                    )
                    
                    if results:
                        total_anuncios = sum(len(data[0]) for data in results.values())
                        total_menciones = sum(len(data[2]) for data in results.values() if len(data) > 2)
                        total_results = total_anuncios + total_menciones
                        
                        st.success(f"‚úÖ **B√∫squeda completada:** {total_results} resultados ({total_anuncios} anuncios + {total_menciones} menciones)")
                        
                        # Mostrar resultados
                        st.subheader("üìã Resultados con Fechas")
                        html_results = format_email(results)
                        st.markdown(html_results, unsafe_allow_html=True)
                        
                        # Descarga
                        st.download_button(
                            label="üì• Descargar Reporte HTML",
                            data=html_results,
                            file_name=f"busqueda_historica_{datetime.now().strftime('%Y%m%d_%H%M')}.html",
                            mime="text/html",
                            use_container_width=True
                        )
                        
                        # Resumen
                        with st.expander("üìà Resumen detallado"):
                            for fuente, (anuncios, url, menciones) in results.items():
                                st.write(f"**{fuente}**: {len(anuncios)} anuncios + {len(menciones)} menciones")
                    
                    else:
                        st.info("‚ÑπÔ∏è No se encontraron resultados para la configuraci√≥n especificada")
                        
                except Exception as e:
                    st.error(f"‚ùå Error ejecutando b√∫squeda: {e}")
                    logging.error(f"Error en b√∫squeda: {e}")